#!/usr/bin/env bash


err_invalid_option() {
    ${VENVMAN_UTILS_DIR}/messages/err_invalid_option "$@"
}

err_missing_options() {
    ${VENVMAN_UTILS_DIR}/messages/err_missing_options "$@"
}


err_missing_option_value() {
    ${VENVMAN_UTILS_DIR}/messages/err_missing_option_value "$@"
}


get_python_bin_path() {
    ${VENVMAN_UTILS_DIR}/get_python_bin_path "$@"
}


venvman_command_help_tag() {
    ${VENVMAN_UTILS_DIR}/messages/venvman_command_help_tag "$@"
}


venvman_make() {
    ${VENVMAN_COMMANDS_DIR}/make "$@"
}


venvman_activate() {
    . ${VENVMAN_COMMANDS_DIR}/activate.sh
    venvman_activate "$@"
}


venvman_clone() {(
    while [ "$#" -gt 0 ]; do
        case $1 in
            -p | --parent)
                if [ -n "$2" ]; then
                    PARENT="$2"
                    shift 2
                else
                    err_missing_option_value "clone" "--parent"
                    return 1
                fi
                ;;
            -v | --version)
                if [ -n "$2" ]; then
                    VERSION="$2"
                    shift 2
                else
                    err_missing_option_value "clone" "--version"
                    return 1
                fi
                ;;
            -to | --clone-to)
                if [ -n "$2" ]; then
                    CLONE_TO="$2"
                    shift 2
                else
                    err_missing_option_value "clone" "--clone-to"
                    return 1
                fi
                ;;
            -h | --help)
                venvman_command_help_tag "clone" \
                    --options \
                        "-p, --parent <venv_name>" \
                        "-v, --version <python_version>" \
                        "-to, --clone-to <venv_path>" \
                        "-h, --help" \
                    --option-descriptions \
                        "Specify the name of the parent virtual environment that will be cloned." \
                        "Specify the Python version to use." \
                        "Specify the name of the name of the new enviornment." \
                        "Display this help message." \
                    --examples \
                        "venvman clone --parent myenv --version 3.10 --clone-to myenv_test" \
                    --example-descriptions \
                        "Will clone myenv to myenv_test" \
                shift
                return 0
                ;;
            *)
                err_invalid_option "clone" "$1"
                return 1
                ;;
        esac
    done

    if ! err_missing_options "/__MISSING__/" "clone" \
        --options "--parent --version --clone-to" \
        --inputs \
            "${PARENT:-/__MISSING__/} \
            ${VERSION:-/__MISSING__/} \
            ${CLONE_TO:-/__MISSING__/}"; then
        return 1
    fi


    if [ "$PARENT" = "$CLONE_TO" ]; then
        echo "ERROR: The value for --parent must differ from --clone-to."
        return 1
    fi


    if ! venvman_activate --version "$VERSION" --name "$PARENT" > /dev/null; then
        return 1
    fi

    PARENT_SITE_PACKAGES_DIR=$(pip show pip | grep Location | awk '{print $2}')

    deactivate > /dev/null || return 1
   
    if ! venvman_make --version "$VERSION" --name "$CLONE_TO"; then
         rm -rf "${CLONE_SITE_PACKAGES_DIR}" 
         return 1
    fi
     
    
    if ! venvman_activate --version "$VERSION" --name "$CLONE_TO"; then
        rm -rf "${CLONE_SITE_PACKAGES_DIR}" 
        return 1
    fi
    
    CLONE_SITE_PACKAGES_DIR=$(pip show pip | grep Location | awk '{print $2}')
    
    deactivate > /dev/null || return 1
    
    if ! cp -r "${PARENT_SITE_PACKAGES_DIR}/"* "${CLONE_SITE_PACKAGES_DIR}/"; then 
        rm -rf "${CLONE_SITE_PACKAGES_DIR}" 
        return 1
    fi
)}


venvman_clone "@"
