#!/usr/bin/env bash


get_subversion_from_version() {
    ${VENVMAN_UTILS_DIR}/get_subversion_from_version $1 $2
}


is_integer() {
    ${VENVMAN_UTILS_DIR}/is_integer $1
}


get_tag_from_version() {
    VERSION=$1
    
    case "$2" in
        --local)
            case "$3" in
                "true")
                    LOCAL=$3
                    ;;
                "false")
                    LOCAL=$3
                    ;;
                *)
                    echo "ERROR: get_tag_from_version --local must be true for false" >&2
                    return 1
                    ;;
            esac
            ;;
        *)
            if [ -n "$2" ]; then
                echo "ERROR get_tag_from_version: invalid input $2" >&2
                return 1
            fi
            ;;
    esac

    if [ -z "$LOCAL" ]; then
        echo "ERROR: get_tag_from_version --local is missing" >&2
        return 1
    fi

    VERSION_MAJOR=$(get_subversion_from_version --major "$VERSION")
    VERSION_MINOR=$(get_subversion_from_version --minor "$VERSION")
    VERSION_PATCH=$(get_subversion_from_version --patch "$VERSION")

    if [ -z "$VERSION_PATCH" ]; then
        FIND_BIGGEST=1
        VERSION_PATCH=0
    fi

    if [ -n "$(echo $VERSION | grep "v")" ]; then
        github_tag_format=$VERSION
    else
        github_tag_format="v$VERSION"
    fi

    if $LOCAL; then
        current="$(pwd)"
        cd "$VENVMAN_CPYTHON_REPO_DIR"
        ITERABLE=$(eval "git tag | grep $github_tag_format")
        cd "$current"
        unset current
    else
        ITERABLE=$(eval "git ls-remote --tags ${VENVMAN_CPYTHON_REMOTE_URL}")
    fi
    
    for tag in $ITERABLE; do
        if ! $LOCAL; then
            case "$tag" in
              *"refs/tags/${github_tag_format}"*) ;;
              *) tag= ;;
            esac

            if [ -z $tag ];then
                continue
            fi
            tag=${tag##*/}
        fi

        _VERSION_MAJOR=$(get_subversion_from_version --major "$tag")
        if [ "$VERSION_MAJOR" != "$_VERSION_MAJOR" ]; then
            if [ "v${VERSION_MAJOR}" != "$_VERSION_MAJOR" ];then
                continue
            fi
        fi

        _VERSION_MINOR=$(get_subversion_from_version --minor "$tag")
        if [ "${VERSION_MINOR}" != "$_VERSION_MINOR" ]; then
            continue
        fi

        _VERSION_PATCH=$(get_subversion_from_version --patch "$tag")
        if ! is_integer "$_VERSION_PATCH"; then
            continue
        fi

        TAG="${_VERSION_MAJOR}.${VERSION_MINOR}.${_VERSION_PATCH}"
        if ! [ "$tag" = "$TAG" ]; then
            continue
        fi

        if [ "$FIND_BIGGEST" = 1 ]; then
            if [ "$_VERSION_PATCH" -ge "$VERSION_PATCH" ]; then
                VERSION_PATCH=$_VERSION_PATCH
            fi

        else
            if [ "$VERSION_PATCH" = "$_VERSION_PATCH" ]; then
                echo $TAG
                unset _VERSION_MAJOR _VERSION_MINOR _VERSION_MINOR
                unset VERSION VERSION_MAJOR VERSION_MINOR VERSION_MINOR
                unset TAG
                return 0
            fi
        fi
    done

    if [ "$FIND_BIGGEST" = 1 ] && [ -n "$TAG" ]; then
        echo "v${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
        unset _VERSION_MAJOR _VERSION_MINOR _VERSION_MINOR
        unset VERSION VERSION_MAJOR VERSION_MINOR VERSION_MINOR
        unset TAG
        unset FIND_BIGGEST
        return 0
    else
        unset _VERSION_MAJOR _VERSION_MINOR _VERSION_MINOR
        unset VERSION VERSION_MAJOR VERSION_MINOR VERSION_MINOR
        unset TAG FIND_BIGGEST
        return 1
    fi
}


get_tag_from_version "$@"
